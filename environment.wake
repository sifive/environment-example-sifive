# helpers for parsing json
def jString jValue = match jValue
  JString string = Pass string
  _ = Fail "not a JString".makeError

def jObject jValue = match jValue
  JObject fields = Pass fields
  _ = Fail "not a JObject".makeError

def jFieldFn fn next jValue =  match jValue.jObject
  Fail e = Fail e
  Pass fields = match (find (fn _.getPairFirst) fields)
    Some (Pair (Pair _ value) _) = next value
    None = Fail "no matching field".makeError

def jField name next jValue =
  jFieldFn (name ==* _) next jValue


def prependOrElseSetEnv env (Pair key value) =
  def editFn =
    _
    | omap ("{value}:{_}")
    | getOrElse value
    | Some
  editEnvironment key editFn env


global def getEnvironmentFromJValue versionMatchFn resourceString jvalue =
  def toolRange = extract `([^/]*)/([^/]*)` resourceString
  def vendorToolRange = extract `([^/]*)/([^/]*)/([^/]*)` resourceString
  def fieldsResult = match toolRange vendorToolRange
    _ (vendor, tool, range, Nil) =
      jField vendor (jField tool (jFieldFn range.versionMatchFn jObject)) jvalue
    (tool, range, Nil) _=
      jField tool (jFieldFn range.versionMatchFn jObject) jvalue
    _ _ = Fail "resources string does not match [vendor/]tool/version format: {resourceString}".makeError

  def getEnvironment fields =
    def getEnvKey (Pair field val) = rmap (Pair field _) val.jString
    fields
    | map getEnvKey
    | findFail

  rmapPass getEnvironment fieldsResult


tuple JSONEnvironmentRunnerPlan =
  global Name: String
  global ScoreFn: (baseScore: Double) => Double # modifier to apply to the base runner's score
  global VersionMatchFn: (range: String) => (version: String) => Boolean # checks whether version range matches a given version
  global JSONs: List JValue # jsons containing resource to environment mappings
  global BaseRunner: Runner

global def makeJSONEnvironmentRunnerPlan name scoreFn versionMatchFn jsons baseRunner =
  JSONEnvironmentRunnerPlan name scoreFn versionMatchFn jsons baseRunner


# creates a runner that will add environment variables to a plan by looking up JValue's using resource strings
# uses the resource string as a json path: 'vendor' and 'tool' should be exact matches and 'version' matches based on `versionMatchFn`
# only the first match in the first JValue will be used for each resource string
# scores are calculated by:
#   1. removing resources that have a json mapping from the plan
#   2. applying the `baseRunner`s score function on the altered plan
#   3. applying`scoreFn` to the result of the base score function
global def makeJSONEnvironmentRunner (JSONEnvironmentRunnerPlan name scoreFn versionMatchFn jValues baseRunner) =
  def getResourceEnvPairs resources =
    def getEnv resource =
      def envResult = findPassFn (getEnvironmentFromJValue versionMatchFn resource) jValues
      Pair resource envResult
    map getEnv resources

  def getFailedResources resourceEnvPairs =
    def getResourceIfFail (Pair resource result) = match result
      Pass _ = None
      Fail _ = Some resource
    mapPartial getResourceIfFail resourceEnvPairs

  def score plan =
    def failedResources = plan.getPlanResources.getResourceEnvPairs.getFailedResources
    plan
    | setPlanResources failedResources
    | baseRunner.getRunnerScore
    | rmap scoreFn

  def pre input =
    def inputFn input =
      def resourceEnvPairs = input.getRunnerInputResources.getResourceEnvPairs
      def newEnv =
        def prependEnv env1 (Pair resource envResult) = match envResult
          Pass env2 = foldl prependOrElseSetEnv env1 env2
          Fail _ = env1
        input
        | getRunnerInputEnvironment
        | (foldl prependEnv _ resourceEnvPairs)
      def newResources = getFailedResources resourceEnvPairs
      input
      | setRunnerInputEnvironment newEnv
      | setRunnerInputResources newResources
    Pair (rmap inputFn input) Unit

  def post (Pair output Unit) = output

  makeRunner name score pre post baseRunner


# returns True if `range` matches `version` exactly, otherwise checks for a match using the semver python package
global def semverMatches range version =
  if range ==* version then True else
    def cmdline =
      "python3", "-c", "import semver; exit(not semver.match(\"{version}\", \"{range}\"))", Nil
    makePlan cmdline Nil
    | setPlanKeep False
    | setPlanStderr logDebug
    | setPlanStdout logDebug
    | setPlanDirectory "python-semver"
    | runJobWith localRunner
    | isJobOk


publish runner =
  def jsonsResult =
    subscribe environmentJSONs
    | map parseJSONFile
    | findFail
  match jsonsResult
    Fail e =
      def _ = printlnLevel logError "Failed to publish environment JSON runner: {e.getErrorCause}"
      Nil
    Pass jsons =
      def plans =
        makeJSONEnvironmentRunnerPlan "environment-json-local" (_ *. 1.5) semverMatches jsons localRunner,
        makeJSONEnvironmentRunnerPlan "environment-json-default" (_ *. 1.5) semverMatches jsons defaultRunner,
        Nil
      map makeJSONEnvironmentRunner plans
